{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { QueryClient as QueryClient$1, notifyManager, parseQueryArgs, QueryObserver, MutationObserver, InfiniteQueryObserver, parseFilterArgs, parseMutationFilterArgs } from '@tanstack/query-core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable, shareReplay, take, tap, Subscription, BehaviorSubject, pipe, map, filter, distinctUntilChanged } from 'rxjs';\nconst QUERY_CLIENT_OPTIONS = new InjectionToken('QUERY_CLIENT_OPTIONS', {\n  providedIn: 'root',\n  factory() {\n    return {};\n  }\n});\nfunction provideQueryClientOptions(options) {\n  return {\n    provide: QUERY_CLIENT_OPTIONS,\n    useValue: options\n  };\n}\nconst QueryClient = new InjectionToken('QueryClient', {\n  providedIn: 'root',\n  factory() {\n    return new QueryClient$1(inject(QUERY_CLIENT_OPTIONS));\n  }\n});\nconst provideQueryClient = queryClient => {\n  return {\n    provide: QueryClient,\n    useValue: queryClient\n  };\n};\nclass QueryClientMount {\n  constructor() {\n    this.instance = inject(QueryClient);\n    this.instance.mount();\n  }\n  ngOnDestroy() {\n    this.instance.unmount();\n  }\n}\nQueryClientMount.ɵfac = function QueryClientMount_Factory(t) {\n  return new (t || QueryClientMount)();\n};\nQueryClientMount.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: QueryClientMount,\n  factory: QueryClientMount.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QueryClientMount, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nconst QueryClientService = new InjectionToken('QueryClientService', {\n  providedIn: 'root',\n  factory() {\n    if (isPlatformBrowser(inject(PLATFORM_ID))) {\n      inject(QueryClientMount);\n    }\n    return inject(QueryClient);\n  }\n});\nfunction baseQuery(client, Observer, options) {\n  const defaultedOptions = client.defaultQueryOptions(options);\n  defaultedOptions._optimisticResults = 'optimistic';\n  defaultedOptions.onError && (defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError));\n  defaultedOptions.onSuccess && (defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess));\n  defaultedOptions.onSettled && (defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled));\n  const queryObserver = new Observer(client, defaultedOptions);\n  queryObserver.result$ = new Observable(observer => {\n    const mergedOptions = client.defaultQueryOptions({\n      ...options,\n      // The query key can be changed, so we need to rebuild it each time\n      ...queryObserver.options\n    });\n    observer.next(queryObserver.getOptimisticResult(mergedOptions));\n    const queryObserverDispose = queryObserver.subscribe(result => {\n      observer.next(!defaultedOptions.notifyOnChangeProps ? queryObserver.trackResult(result) : result);\n    });\n    return () => {\n      queryObserverDispose();\n    };\n  }).pipe(shareReplay({\n    bufferSize: 1,\n    refCount: true\n  }));\n  return queryObserver;\n}\nfunction fromQueryFn(originalQueryFn, client, queryKey) {\n  function queryFn$(queryFnArgs) {\n    return new Promise((res, rej) => {\n      const subscription = originalQueryFn(queryFnArgs).pipe(take(1), tap({\n        unsubscribe: () => {\n          client.cancelQueries(queryKey);\n        }\n      })).subscribe({\n        next: res,\n        error: rej\n      });\n      queryFnArgs.signal?.addEventListener('abort', () => {\n        subscription.unsubscribe();\n      });\n    });\n  }\n  return queryFn$;\n}\nfunction buildQuery(client, Observer, options) {\n  const originalQueryFn = options.queryFn;\n  options.queryFn && (options.queryFn = fromQueryFn(originalQueryFn, client, options.queryKey));\n  return baseQuery(client, Observer, options);\n}\nfunction createSyncObserverResult(data, options = {}) {\n  return {\n    data,\n    isLoading: false,\n    isError: false,\n    isSuccess: true,\n    status: 'success',\n    ...options\n  };\n}\nfunction someRequestsStatusOf(requests, status) {\n  const toArray = Array.isArray(requests) ? requests : Object.values(requests);\n  return toArray.some(req => req.status === status);\n}\nfunction allRequestsStatusOf(requests, status) {\n  const toArray = Array.isArray(requests) ? requests : Object.values(requests);\n  return !toArray.some(req => req.status !== status);\n}\nclass QueryService {\n  constructor() {\n    this.instance = inject(QueryClientService);\n  }\n  use(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    return buildQuery(this.instance, QueryObserver, parsedOptions);\n  }\n}\nQueryService.ɵfac = function QueryService_Factory(t) {\n  return new (t || QueryService)();\n};\nQueryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: QueryService,\n  factory: QueryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QueryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst UseQuery = new InjectionToken('UseQuery', {\n  providedIn: 'root',\n  factory() {\n    const query = new QueryService();\n    return query.use.bind(query);\n  }\n});\nclass MutationService {\n  constructor() {\n    this.instance = inject(QueryClientService);\n  }\n  use(mutationFn, options = {}) {\n    const sourceSubscription = new Subscription();\n    const mutationObserver = new MutationObserver(this.instance, {\n      ...options,\n      mutationFn(vars) {\n        return new Promise((res, rej) => {\n          const subscription = mutationFn(vars).subscribe({\n            next: res,\n            error: rej\n          });\n          sourceSubscription.add(subscription);\n        });\n      }\n    });\n    mutationObserver['result$'] = new Observable(observer => {\n      observer.next(mutationObserver.getCurrentResult());\n      const mutationObserverDispose = mutationObserver.subscribe(notifyManager.batchCalls(result => {\n        observer.next(result);\n      }));\n      return () => {\n        sourceSubscription.unsubscribe();\n        mutationObserverDispose();\n      };\n    });\n    return mutationObserver;\n  }\n}\nMutationService.ɵfac = function MutationService_Factory(t) {\n  return new (t || MutationService)();\n};\nMutationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MutationService,\n  factory: MutationService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MutationService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst UseMutation = new InjectionToken('MutationProvider', {\n  providedIn: 'root',\n  factory() {\n    const mutation = new MutationService();\n    return mutation.use.bind(mutation);\n  }\n});\nclass InfiniteQueryService {\n  constructor() {\n    this.instance = inject(QueryClientService);\n  }\n  use(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    return buildQuery(this.instance, InfiniteQueryObserver, parsedOptions);\n  }\n}\nInfiniteQueryService.ɵfac = function InfiniteQueryService_Factory(t) {\n  return new (t || InfiniteQueryService)();\n};\nInfiniteQueryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InfiniteQueryService,\n  factory: InfiniteQueryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InfiniteQueryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst UseInfiniteQuery = new InjectionToken('UseInfiniteQuery', {\n  providedIn: 'root',\n  factory() {\n    const query = new InfiniteQueryService();\n    return query.use.bind(query);\n  }\n});\nclass MutationResult {\n  constructor(result = {}) {\n    this.data = null;\n    this.isError = false;\n    this.isLoading = false;\n    this.isSuccess = false;\n    this.error = null;\n    Object.assign(this, result);\n  }\n}\nfunction useMutationResult(options = {}) {\n  const store = new BehaviorSubject(new MutationResult(options));\n  function update(data) {\n    let resolved = data;\n    if (typeof data === 'function') {\n      resolved = data(store.getValue().data);\n    }\n    store.next(new MutationResult({\n      data: resolved,\n      isSuccess: true\n    }));\n  }\n  return {\n    result$: store.asObservable(),\n    track() {\n      return pipe(tap({\n        next(data) {\n          update(data);\n        },\n        subscribe() {\n          store.next(new MutationResult({\n            isLoading: true\n          }));\n        },\n        error(err) {\n          store.next(new MutationResult({\n            error: err,\n            isError: true\n          }));\n        }\n      }));\n    }\n  };\n}\nfunction mapResultData(mapFn) {\n  return pipe(map(result => {\n    return {\n      ...result,\n      data: result.data ? mapFn(result.data) : result.data\n    };\n  }));\n}\nfunction filterError() {\n  return filter(result => result.status === 'error');\n}\nfunction filterSuccess() {\n  return filter(result => result.isSuccess);\n}\nfunction selectResult(mapFn) {\n  return pipe(map(mapFn), distinctUntilChanged());\n}\nfunction tapSuccess(cb) {\n  return tap(result => {\n    if (result.isSuccess) {\n      cb(result.data);\n    }\n  });\n}\nclass IsFetchingService {\n  constructor() {\n    this.instance = inject(QueryClientService);\n  }\n  use(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return new Observable(obs => {\n      obs.next(this.instance.isFetching(filters));\n      this.instance.getQueryCache().subscribe(notifyManager.batchCalls(() => {\n        obs.next(this.instance.isFetching(filters));\n      }));\n    }).pipe(distinctUntilChanged());\n  }\n}\nIsFetchingService.ɵfac = function IsFetchingService_Factory(t) {\n  return new (t || IsFetchingService)();\n};\nIsFetchingService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: IsFetchingService,\n  factory: IsFetchingService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IsFetchingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst UseIsFetching = new InjectionToken('UseIsFetching', {\n  providedIn: 'root',\n  factory() {\n    const query = new IsFetchingService();\n    return query.use.bind(query);\n  }\n});\nclass IsMutatingService {\n  constructor() {\n    this.instance = inject(QueryClientService);\n  }\n  use(arg1, arg2) {\n    const [filters] = parseMutationFilterArgs(arg1, arg2);\n    return new Observable(obs => {\n      obs.next(this.instance.isMutating(filters));\n      this.instance.getMutationCache().subscribe(notifyManager.batchCalls(() => {\n        obs.next(this.instance.isMutating(filters));\n      }));\n    }).pipe(distinctUntilChanged());\n  }\n}\nIsMutatingService.ɵfac = function IsMutatingService_Factory(t) {\n  return new (t || IsMutatingService)();\n};\nIsMutatingService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: IsMutatingService,\n  factory: IsMutatingService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IsMutatingService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst UseIsMutating = new InjectionToken('UseIsMutating', {\n  providedIn: 'root',\n  factory() {\n    const query = new IsMutatingService();\n    return query.use.bind(query);\n  }\n});\nfunction queryOptions(options) {\n  return options;\n}\nclass PersistedQueryService {\n  constructor() {\n    this.useQuery = inject(UseQuery);\n    this.client = inject(QueryClientService);\n  }\n  use(queryObserverOptionsFn) {\n    let observer;\n    return (key, params) => {\n      const mergedOptions = {\n        ...queryObserverOptionsFn(key, params),\n        keepPreviousData: true\n      };\n      if (!observer) {\n        observer = this.useQuery(mergedOptions);\n      } else {\n        const originalQueryFn = mergedOptions.queryFn;\n        mergedOptions.queryFn = fromQueryFn(originalQueryFn, this.client, mergedOptions.queryKey);\n        const options = this.client.defaultQueryOptions(mergedOptions);\n        observer.setOptions(options);\n      }\n      return observer;\n    };\n  }\n}\nPersistedQueryService.ɵfac = function PersistedQueryService_Factory(t) {\n  return new (t || PersistedQueryService)();\n};\nPersistedQueryService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PersistedQueryService,\n  factory: PersistedQueryService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PersistedQueryService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nconst UsePersistedQuery = new InjectionToken('UsePersistedQuery', {\n  providedIn: 'root',\n  factory() {\n    const query = new PersistedQueryService();\n    return query.use.bind(query);\n  }\n});\nfunction addEntity(entitiesKey, entity) {\n  return function (state) {\n    if (state) {\n      return {\n        ...state,\n        [entitiesKey]: [...state[entitiesKey], entity]\n      };\n    }\n    return;\n  };\n}\nfunction removeEntity(entitiesKey, entityId, entityIdKey = 'id') {\n  return function (state) {\n    if (state) {\n      return {\n        ...state,\n        [entitiesKey]: state[entitiesKey].filter(entity => entity[entityIdKey] !== entityId)\n      };\n    }\n    return;\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InfiniteQueryService, IsFetchingService, IsMutatingService, MutationService, PersistedQueryService, QUERY_CLIENT_OPTIONS, QueryClientService, QueryService, UseInfiniteQuery, UseIsFetching, UseIsMutating, UseMutation, UsePersistedQuery, UseQuery, addEntity, allRequestsStatusOf, createSyncObserverResult, filterError, filterSuccess, fromQueryFn, mapResultData, provideQueryClient, provideQueryClientOptions, queryOptions, removeEntity, selectResult, someRequestsStatusOf, tapSuccess, useMutationResult };","map":{"version":3,"names":["i0","InjectionToken","inject","Injectable","PLATFORM_ID","QueryClient","QueryClient$1","notifyManager","parseQueryArgs","QueryObserver","MutationObserver","InfiniteQueryObserver","parseFilterArgs","parseMutationFilterArgs","isPlatformBrowser","Observable","shareReplay","take","tap","Subscription","BehaviorSubject","pipe","map","filter","distinctUntilChanged","QUERY_CLIENT_OPTIONS","providedIn","factory","provideQueryClientOptions","options","provide","useValue","provideQueryClient","queryClient","QueryClientMount","constructor","instance","mount","ngOnDestroy","unmount","ɵfac","QueryClientMount_Factory","t","ɵprov","ɵɵdefineInjectable","token","ngDevMode","ɵsetClassMetadata","type","args","QueryClientService","baseQuery","client","Observer","defaultedOptions","defaultQueryOptions","_optimisticResults","onError","batchCalls","onSuccess","onSettled","queryObserver","result$","observer","mergedOptions","next","getOptimisticResult","queryObserverDispose","subscribe","result","notifyOnChangeProps","trackResult","bufferSize","refCount","fromQueryFn","originalQueryFn","queryKey","queryFn$","queryFnArgs","Promise","res","rej","subscription","unsubscribe","cancelQueries","error","signal","addEventListener","buildQuery","queryFn","createSyncObserverResult","data","isLoading","isError","isSuccess","status","someRequestsStatusOf","requests","toArray","Array","isArray","Object","values","some","req","allRequestsStatusOf","QueryService","use","arg1","arg2","arg3","parsedOptions","QueryService_Factory","UseQuery","query","bind","MutationService","mutationFn","sourceSubscription","mutationObserver","vars","add","getCurrentResult","mutationObserverDispose","MutationService_Factory","UseMutation","mutation","InfiniteQueryService","InfiniteQueryService_Factory","UseInfiniteQuery","MutationResult","assign","useMutationResult","store","update","resolved","getValue","asObservable","track","err","mapResultData","mapFn","filterError","filterSuccess","selectResult","tapSuccess","cb","IsFetchingService","filters","obs","isFetching","getQueryCache","IsFetchingService_Factory","UseIsFetching","IsMutatingService","isMutating","getMutationCache","IsMutatingService_Factory","UseIsMutating","queryOptions","PersistedQueryService","useQuery","queryObserverOptionsFn","key","params","keepPreviousData","setOptions","PersistedQueryService_Factory","UsePersistedQuery","addEntity","entitiesKey","entity","state","removeEntity","entityId","entityIdKey"],"sources":["C:/Users/gregor.woiwode/workbench/talks/talk-qwik-angular/node_modules/.pnpm/@ngneat+query@1.0.0-beta.19_@angular+common@16.1.6/node_modules/@ngneat/query/fesm2020/ngneat-query.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { QueryClient as QueryClient$1, notifyManager, parseQueryArgs, QueryObserver, MutationObserver, InfiniteQueryObserver, parseFilterArgs, parseMutationFilterArgs } from '@tanstack/query-core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable, shareReplay, take, tap, Subscription, BehaviorSubject, pipe, map, filter, distinctUntilChanged } from 'rxjs';\n\nconst QUERY_CLIENT_OPTIONS = new InjectionToken('QUERY_CLIENT_OPTIONS', {\n    providedIn: 'root',\n    factory() {\n        return {};\n    },\n});\nfunction provideQueryClientOptions(options) {\n    return {\n        provide: QUERY_CLIENT_OPTIONS,\n        useValue: options,\n    };\n}\n\nconst QueryClient = new InjectionToken('QueryClient', {\n    providedIn: 'root',\n    factory() {\n        return new QueryClient$1(inject(QUERY_CLIENT_OPTIONS));\n    },\n});\nconst provideQueryClient = (queryClient) => {\n    return {\n        provide: QueryClient,\n        useValue: queryClient,\n    };\n};\nclass QueryClientMount {\n    constructor() {\n        this.instance = inject(QueryClient);\n        this.instance.mount();\n    }\n    ngOnDestroy() {\n        this.instance.unmount();\n    }\n}\nQueryClientMount.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: QueryClientMount, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nQueryClientMount.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: QueryClientMount, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: QueryClientMount, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return []; } });\nconst QueryClientService = new InjectionToken('QueryClientService', {\n    providedIn: 'root',\n    factory() {\n        if (isPlatformBrowser(inject(PLATFORM_ID))) {\n            inject(QueryClientMount);\n        }\n        return inject(QueryClient);\n    },\n});\n\nfunction baseQuery(client, Observer, options) {\n    const defaultedOptions = client.defaultQueryOptions(options);\n    defaultedOptions._optimisticResults = 'optimistic';\n    defaultedOptions.onError && (defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError));\n    defaultedOptions.onSuccess && (defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess));\n    defaultedOptions.onSettled && (defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled));\n    const queryObserver = new Observer(client, defaultedOptions);\n    queryObserver.result$ =\n        new Observable((observer) => {\n            const mergedOptions = client.defaultQueryOptions({\n                ...options,\n                // The query key can be changed, so we need to rebuild it each time\n                ...queryObserver.options,\n            });\n            observer.next(queryObserver.getOptimisticResult(mergedOptions));\n            const queryObserverDispose = queryObserver.subscribe((result) => {\n                observer.next(!defaultedOptions.notifyOnChangeProps\n                    ? queryObserver.trackResult(result)\n                    : result);\n            });\n            return () => {\n                queryObserverDispose();\n            };\n        }).pipe(shareReplay({\n            bufferSize: 1,\n            refCount: true,\n        }));\n    return queryObserver;\n}\n\nfunction fromQueryFn(originalQueryFn, client, queryKey) {\n    function queryFn$(queryFnArgs) {\n        return new Promise((res, rej) => {\n            const subscription = originalQueryFn(queryFnArgs)\n                .pipe(take(1), tap({\n                unsubscribe: () => {\n                    client.cancelQueries(queryKey);\n                },\n            }))\n                .subscribe({\n                next: res,\n                error: rej,\n            });\n            queryFnArgs.signal?.addEventListener('abort', () => {\n                subscription.unsubscribe();\n            });\n        });\n    }\n    return queryFn$;\n}\nfunction buildQuery(client, Observer, options) {\n    const originalQueryFn = options.queryFn;\n    options.queryFn && (options.queryFn = fromQueryFn(originalQueryFn, client, options.queryKey));\n    return baseQuery(client, Observer, options);\n}\nfunction createSyncObserverResult(data, options = {}) {\n    return {\n        data,\n        isLoading: false,\n        isError: false,\n        isSuccess: true,\n        status: 'success',\n        ...options,\n    };\n}\nfunction someRequestsStatusOf(requests, status) {\n    const toArray = Array.isArray(requests) ? requests : Object.values(requests);\n    return toArray.some((req) => req.status === status);\n}\nfunction allRequestsStatusOf(requests, status) {\n    const toArray = Array.isArray(requests) ? requests : Object.values(requests);\n    return !toArray.some((req) => req.status !== status);\n}\n\nclass QueryService {\n    constructor() {\n        this.instance = inject(QueryClientService);\n    }\n    use(arg1, arg2, arg3) {\n        const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n        return buildQuery(this.instance, QueryObserver, parsedOptions);\n    }\n}\nQueryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: QueryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nQueryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: QueryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: QueryService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nconst UseQuery = new InjectionToken('UseQuery', {\n    providedIn: 'root',\n    factory() {\n        const query = new QueryService();\n        return query.use.bind(query);\n    },\n});\n\nclass MutationService {\n    constructor() {\n        this.instance = inject(QueryClientService);\n    }\n    use(mutationFn, options = {}) {\n        const sourceSubscription = new Subscription();\n        const mutationObserver = new MutationObserver(this.instance, {\n            ...options,\n            mutationFn(vars) {\n                return new Promise((res, rej) => {\n                    const subscription = mutationFn(vars).subscribe({\n                        next: res,\n                        error: rej,\n                    });\n                    sourceSubscription.add(subscription);\n                });\n            },\n        });\n        mutationObserver['result$'] = new Observable((observer) => {\n            observer.next(mutationObserver.getCurrentResult());\n            const mutationObserverDispose = mutationObserver.subscribe(notifyManager.batchCalls((result) => {\n                observer.next(result);\n            }));\n            return () => {\n                sourceSubscription.unsubscribe();\n                mutationObserverDispose();\n            };\n        });\n        return mutationObserver;\n    }\n}\nMutationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: MutationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMutationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: MutationService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: MutationService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nconst UseMutation = new InjectionToken('MutationProvider', {\n    providedIn: 'root',\n    factory() {\n        const mutation = new MutationService();\n        return mutation.use.bind(mutation);\n    },\n});\n\nclass InfiniteQueryService {\n    constructor() {\n        this.instance = inject(QueryClientService);\n    }\n    use(arg1, arg2, arg3) {\n        const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n        return buildQuery(this.instance, InfiniteQueryObserver, parsedOptions);\n    }\n}\nInfiniteQueryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InfiniteQueryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nInfiniteQueryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InfiniteQueryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: InfiniteQueryService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nconst UseInfiniteQuery = new InjectionToken('UseInfiniteQuery', {\n    providedIn: 'root',\n    factory() {\n        const query = new InfiniteQueryService();\n        return query.use.bind(query);\n    },\n});\n\nclass MutationResult {\n    constructor(result = {}) {\n        this.data = null;\n        this.isError = false;\n        this.isLoading = false;\n        this.isSuccess = false;\n        this.error = null;\n        Object.assign(this, result);\n    }\n}\nfunction useMutationResult(options = {}) {\n    const store = new BehaviorSubject(new MutationResult(options));\n    function update(data) {\n        let resolved = data;\n        if (typeof data === 'function') {\n            resolved = data(store.getValue().data);\n        }\n        store.next(new MutationResult({\n            data: resolved,\n            isSuccess: true,\n        }));\n    }\n    return {\n        result$: store.asObservable(),\n        track() {\n            return pipe(tap({\n                next(data) {\n                    update(data);\n                },\n                subscribe() {\n                    store.next(new MutationResult({\n                        isLoading: true,\n                    }));\n                },\n                error(err) {\n                    store.next(new MutationResult({\n                        error: err,\n                        isError: true,\n                    }));\n                },\n            }));\n        },\n    };\n}\n\nfunction mapResultData(mapFn) {\n    return pipe(map((result) => {\n        return {\n            ...result,\n            data: result.data ? mapFn(result.data) : result.data,\n        };\n    }));\n}\nfunction filterError() {\n    return filter((result) => result.status === 'error');\n}\nfunction filterSuccess() {\n    return filter((result) => result.isSuccess);\n}\nfunction selectResult(mapFn) {\n    return pipe(map(mapFn), distinctUntilChanged());\n}\nfunction tapSuccess(cb) {\n    return tap((result) => {\n        if (result.isSuccess) {\n            cb(result.data);\n        }\n    });\n}\n\nclass IsFetchingService {\n    constructor() {\n        this.instance = inject(QueryClientService);\n    }\n    use(arg1, arg2) {\n        const [filters] = parseFilterArgs(arg1, arg2);\n        return new Observable((obs) => {\n            obs.next(this.instance.isFetching(filters));\n            this.instance.getQueryCache().subscribe(notifyManager.batchCalls(() => {\n                obs.next(this.instance.isFetching(filters));\n            }));\n        }).pipe(distinctUntilChanged());\n    }\n}\nIsFetchingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: IsFetchingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nIsFetchingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: IsFetchingService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: IsFetchingService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nconst UseIsFetching = new InjectionToken('UseIsFetching', {\n    providedIn: 'root',\n    factory() {\n        const query = new IsFetchingService();\n        return query.use.bind(query);\n    },\n});\n\nclass IsMutatingService {\n    constructor() {\n        this.instance = inject(QueryClientService);\n    }\n    use(arg1, arg2) {\n        const [filters] = parseMutationFilterArgs(arg1, arg2);\n        return new Observable((obs) => {\n            obs.next(this.instance.isMutating(filters));\n            this.instance.getMutationCache().subscribe(notifyManager.batchCalls(() => {\n                obs.next(this.instance.isMutating(filters));\n            }));\n        }).pipe(distinctUntilChanged());\n    }\n}\nIsMutatingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: IsMutatingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nIsMutatingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: IsMutatingService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: IsMutatingService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nconst UseIsMutating = new InjectionToken('UseIsMutating', {\n    providedIn: 'root',\n    factory() {\n        const query = new IsMutatingService();\n        return query.use.bind(query);\n    },\n});\n\nfunction queryOptions(options) {\n    return options;\n}\nclass PersistedQueryService {\n    constructor() {\n        this.useQuery = inject(UseQuery);\n        this.client = inject(QueryClientService);\n    }\n    use(queryObserverOptionsFn) {\n        let observer;\n        return (key, params) => {\n            const mergedOptions = {\n                ...queryObserverOptionsFn(key, params),\n                keepPreviousData: true,\n            };\n            if (!observer) {\n                observer = this.useQuery(mergedOptions);\n            }\n            else {\n                const originalQueryFn = mergedOptions.queryFn;\n                mergedOptions.queryFn = fromQueryFn(originalQueryFn, this.client, mergedOptions.queryKey);\n                const options = this.client.defaultQueryOptions(mergedOptions);\n                observer.setOptions(options);\n            }\n            return observer;\n        };\n    }\n}\nPersistedQueryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: PersistedQueryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nPersistedQueryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: PersistedQueryService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: PersistedQueryService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nconst UsePersistedQuery = new InjectionToken('UsePersistedQuery', {\n    providedIn: 'root',\n    factory() {\n        const query = new PersistedQueryService();\n        return query.use.bind(query);\n    },\n});\n\nfunction addEntity(entitiesKey, entity) {\n    return function (state) {\n        if (state) {\n            return {\n                ...state,\n                [entitiesKey]: [...state[entitiesKey], entity],\n            };\n        }\n        return;\n    };\n}\nfunction removeEntity(entitiesKey, entityId, entityIdKey = 'id') {\n    return function (state) {\n        if (state) {\n            return {\n                ...state,\n                [entitiesKey]: state[entitiesKey].filter((entity) => entity[entityIdKey] !== entityId),\n            };\n        }\n        return;\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InfiniteQueryService, IsFetchingService, IsMutatingService, MutationService, PersistedQueryService, QUERY_CLIENT_OPTIONS, QueryClientService, QueryService, UseInfiniteQuery, UseIsFetching, UseIsMutating, UseMutation, UsePersistedQuery, UseQuery, addEntity, allRequestsStatusOf, createSyncObserverResult, filterError, filterSuccess, fromQueryFn, mapResultData, provideQueryClient, provideQueryClientOptions, queryOptions, removeEntity, selectResult, someRequestsStatusOf, tapSuccess, useMutationResult };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}