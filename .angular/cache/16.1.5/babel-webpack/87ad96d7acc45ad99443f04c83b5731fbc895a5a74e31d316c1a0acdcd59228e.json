{"ast":null,"code":"import { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this);\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n      this.updateTimers();\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n  destroy() {\n    this.listeners = new Set();\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n    if (process.env.NODE_ENV !== 'production' && typeof (options == null ? void 0 : options.isDataEqual) !== 'undefined') {\n      this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n    }\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this\n      });\n    }\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    const result = this.createResult(query, options);\n    if (shouldAssignObserverCurrentProperties(this, result, options)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.currentResult = result;\n      this.currentResultOptions = this.options;\n      this.currentResultState = this.currentQuery.state;\n    }\n    return result;\n  }\n  getCurrentResult() {\n    return this.currentResult;\n  }\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({\n      ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n  computeRefetchInterval() {\n    var _this$options$refetch;\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n            this.selectError = selectError;\n          }\n        }\n      }\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n    const isFetching = fetchStatus === 'fetching';\n    const isLoading = status === 'loading';\n    const isError = status === 'error';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n      const {\n        notifyOnChangeProps\n      } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === 'function' ? notifyOnChangeProps() : notifyOnChangeProps;\n      if (notifyOnChangePropsValue === 'all' || !notifyOnChangePropsValue && !this.trackedProps.size) {\n        return true;\n      }\n      const includedProps = new Set(notifyOnChangePropsValue != null ? notifyOnChangePropsValue : this.trackedProps);\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n    this.notify({\n      ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n    if (query === this.currentQuery) {\n      return;\n    }\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n    this.updateResult(notifyOptions);\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({\n          listener\n        }) => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n}\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n} // this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\n\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult, options) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false;\n  } // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData;\n  } // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n\n  if (observer.getCurrentResult() !== optimisticResult) {\n    return true;\n  } // basically, just keep previous properties if nothing changed\n\n  return false;\n}\nexport { QueryObserver };","map":{"version":3,"names":["shallowEqualObjects","noop","isServer","isValidTimeout","timeUntilStale","replaceData","notifyManager","focusManager","Subscribable","canFetch","isCancelledError","QueryObserver","constructor","client","options","trackedProps","Set","selectError","bindMethods","setOptions","remove","bind","refetch","onSubscribe","listeners","size","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","process","env","NODE_ENV","isDataEqual","getLogger","error","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","currentResult","currentResultOptions","currentResultState","state","getCurrentResult","trackResult","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","_fetchOptions$cancelR","cancelRefetch","promise","throwOnError","catch","isStale","time","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","_this$options$refetch","refetchInterval","data","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","useErrorBoundary","some","typedKey","changed","has","onQueryUpdate","action","onSuccess","manual","onError","batch","_this$options$onSucce","_this$options","_this$options$onSettl","_this$options2","call","onSettled","_this$options$onError","_this$options3","_this$options$onSettl2","_this$options4","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime","optimisticResult"],"sources":["C:/Users/gregor.woiwode/workbench/talks/talk-qwik-angular/node_modules/.pnpm/@tanstack+query-core@4.32.0/node_modules/@tanstack/query-core/build/lib/queryObserver.mjs"],"sourcesContent":["import { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\n\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.destroy();\n    }\n  }\n\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n\n  destroy() {\n    this.listeners = new Set();\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n\n    if (process.env.NODE_ENV !== 'production' && typeof (options == null ? void 0 : options.isDataEqual) !== 'undefined') {\n      this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this\n      });\n    }\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    const result = this.createResult(query, options);\n\n    if (shouldAssignObserverCurrentProperties(this, result, options)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.currentResult = result;\n      this.currentResultOptions = this.options;\n      this.currentResultState = this.currentQuery.state;\n    }\n\n    return result;\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n\n    return this.executeFetch({ ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n\n  computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n\n    const isFetching = fetchStatus === 'fetching';\n    const isLoading = status === 'loading';\n    const isError = status === 'error';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n\n      const {\n        notifyOnChangeProps\n      } = this.options;\n      const notifyOnChangePropsValue = typeof notifyOnChangeProps === 'function' ? notifyOnChangeProps() : notifyOnChangeProps;\n\n      if (notifyOnChangePropsValue === 'all' || !notifyOnChangePropsValue && !this.trackedProps.size) {\n        return true;\n      }\n\n      const includedProps = new Set(notifyOnChangePropsValue != null ? notifyOnChangePropsValue : this.trackedProps);\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify({ ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(({\n          listener\n        }) => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n\n}\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n} // this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\n\n\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult, options) {\n  // it is important to keep this condition like this for three reasons:\n  // 1. It will get removed in the v5\n  // 2. it reads: don't update the properties if we want to keep the previous\n  // data.\n  // 3. The opposite condition (!options.keepPreviousData) would fallthrough\n  // and will result in a bad decision\n  if (options.keepPreviousData) {\n    return false;\n  } // this means we want to put some placeholder data when pending and queryKey\n  // changed.\n\n\n  if (options.placeholderData !== undefined) {\n    // re-assign properties only if current data is placeholder data\n    // which means that data did not arrive yet, so, if there is some cached data\n    // we need to \"prepare\" to receive it\n    return optimisticResult.isPlaceholderData;\n  } // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n\n\n  if (observer.getCurrentResult() !== optimisticResult) {\n    return true;\n  } // basically, just keep previous properties if nothing changed\n\n\n  return false;\n}\n\nexport { QueryObserver };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}