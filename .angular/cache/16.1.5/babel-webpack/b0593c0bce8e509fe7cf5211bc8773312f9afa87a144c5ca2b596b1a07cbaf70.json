{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/gregor.woiwode/workbench/talks/talk-qwik-angular/node_modules/.pnpm/@babel+runtime@7.22.5/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs';\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.defaultOptions = config.defaultOptions;\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n  setOptions(options) {\n    this.options = {\n      ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n  continue() {\n    var _this$retryer$continu, _this$retryer;\n    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n  }\n  execute() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const executeMutation = () => {\n        var _this$options$retry;\n        _this.retryer = createRetryer({\n          fn: () => {\n            if (!_this.options.mutationFn) {\n              return Promise.reject('No mutationFn found');\n            }\n            return _this.options.mutationFn(_this.state.variables);\n          },\n          onFail: (failureCount, error) => {\n            _this.dispatch({\n              type: 'failed',\n              failureCount,\n              error\n            });\n          },\n          onPause: () => {\n            _this.dispatch({\n              type: 'pause'\n            });\n          },\n          onContinue: () => {\n            _this.dispatch({\n              type: 'continue'\n            });\n          },\n          retry: (_this$options$retry = _this.options.retry) != null ? _this$options$retry : 0,\n          retryDelay: _this.options.retryDelay,\n          networkMode: _this.options.networkMode\n        });\n        return _this.retryer.promise;\n      };\n      const restored = _this.state.status === 'loading';\n      try {\n        var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;\n        if (!restored) {\n          var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n          _this.dispatch({\n            type: 'loading',\n            variables: _this.options.variables\n          }); // Notify cache callback\n\n          yield (_this$mutationCache$c = (_this$mutationCache$c2 = _this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, _this.state.variables, _this);\n          const context = yield (_this$options$onMutat = (_this$options = _this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, _this.state.variables);\n          if (context !== _this.state.context) {\n            _this.dispatch({\n              type: 'loading',\n              context,\n              variables: _this.state.variables\n            });\n          }\n        }\n        const data = yield executeMutation(); // Notify cache callback\n\n        yield (_this$mutationCache$c3 = (_this$mutationCache$c4 = _this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, _this.state.variables, _this.state.context, _this);\n        yield (_this$options$onSucce = (_this$options2 = _this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, _this.state.variables, _this.state.context); // Notify cache callback\n\n        yield (_this$mutationCache$c5 = (_this$mutationCache$c6 = _this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, _this.state.variables, _this.state.context, _this);\n        yield (_this$options$onSettl = (_this$options3 = _this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, _this.state.variables, _this.state.context);\n        _this.dispatch({\n          type: 'success',\n          data\n        });\n        return data;\n      } catch (error) {\n        try {\n          var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n\n          // Notify cache callback\n          yield (_this$mutationCache$c7 = (_this$mutationCache$c8 = _this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, _this.state.variables, _this.state.context, _this);\n          if (process.env.NODE_ENV !== 'production') {\n            _this.logger.error(error);\n          }\n          yield (_this$options$onError = (_this$options4 = _this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, _this.state.variables, _this.state.context); // Notify cache callback\n\n          yield (_this$mutationCache$c9 = (_this$mutationCache$c10 = _this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, error, _this.state.variables, _this.state.context, _this);\n          yield (_this$options$onSettl2 = (_this$options5 = _this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, _this.state.variables, _this.state.context);\n          throw error;\n        } finally {\n          _this.dispatch({\n            type: 'error',\n            error: error\n          });\n        }\n      }\n    })();\n  }\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true\n          };\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false\n          };\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error'\n          };\n        case 'setState':\n          return {\n            ...state,\n            ...action.state\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\nexport { Mutation, getDefaultState };","map":{"version":3,"names":["defaultLogger","notifyManager","Removable","createRetryer","canFetch","Mutation","constructor","config","defaultOptions","mutationId","mutationCache","logger","observers","state","getDefaultState","setOptions","options","scheduleGc","updateCacheTime","cacheTime","meta","setState","dispatch","type","addObserver","observer","includes","push","clearGcTimeout","notify","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","_this$retryer$continu","_this$retryer","retryer","execute","_this","_asyncToGenerator","executeMutation","_this$options$retry","fn","mutationFn","Promise","reject","variables","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","promise","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","onMutate","call","context","data","onSuccess","onSettled","_this$mutationCache$c7","_this$mutationCache$c8","_this$options$onError","_this$options4","_this$mutationCache$c9","_this$mutationCache$c10","_this$options$onSettl2","_this$options5","onError","process","env","NODE_ENV","undefined","action","reducer","failureReason","isPaused","batch","forEach","onMutationUpdate"],"sources":["C:/Users/gregor.woiwode/workbench/talks/talk-qwik-angular/node_modules/.pnpm/@tanstack+query-core@4.32.0/node_modules/@tanstack/query-core/build/lib/mutation.mjs"],"sourcesContent":["import { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs';\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.defaultOptions = config.defaultOptions;\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    var _this$retryer$continu, _this$retryer;\n\n    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n  }\n\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({\n            type: 'failed',\n            failureCount,\n            error\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n\n    const restored = this.state.status === 'loading';\n\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;\n\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n\n      const data = await executeMutation(); // Notify cache callback\n\n      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context)); // Notify cache callback\n\n      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context)); // Notify cache callback\n\n        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, error, this.state.variables, this.state.context, this));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            isPaused: true\n          };\n\n        case 'continue':\n          return { ...state,\n            isPaused: false\n          };\n\n        case 'loading':\n          return { ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n\n        case 'error':\n          return { ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error'\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\nexport { Mutation, getDefaultState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}