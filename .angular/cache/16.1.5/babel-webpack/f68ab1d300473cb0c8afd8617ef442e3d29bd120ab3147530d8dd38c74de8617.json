{"ast":null,"code":"import { parseFilterArgs, parseQueryArgs, functionalUpdate, noop, hashQueryKey, partialMatchKey, hashQueryKeyByOptions } from './utils.mjs';\nimport { QueryCache } from './queryCache.mjs';\nimport { MutationCache } from './mutationCache.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior.mjs';\nimport { defaultLogger } from './logger.mjs';\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n    this.mountCount = 0;\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n    }\n  }\n  mount() {\n    this.mountCount++;\n    if (this.mountCount !== 1) return;\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n    this.mountCount--;\n    if (this.mountCount !== 0) return;\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    this.unsubscribeFocus = undefined;\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n    this.unsubscribeOnline = undefined;\n  }\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n  isMutating(filters) {\n    return this.mutationCache.findAll({\n      ...filters,\n      fetching: true\n    }).length;\n  }\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n  ensureQueryData(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const cachedData = this.getQueryData(parsedOptions.queryKey);\n    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n  }\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, {\n      ...options,\n      manual: true\n    });\n  }\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n      const refetchFilters = {\n        ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n      return query.fetch(undefined, {\n        ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n    return promise;\n  }\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n  getQueryCache() {\n    return this.queryCache;\n  }\n  getMutationCache() {\n    return this.mutationCache;\n  }\n  getLogger() {\n    return this.logger;\n  }\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n      }\n    }\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n      }\n    }\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n    return defaultedOptions;\n  }\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n}\nexport { QueryClient };","map":{"version":3,"names":["parseFilterArgs","parseQueryArgs","functionalUpdate","noop","hashQueryKey","partialMatchKey","hashQueryKeyByOptions","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","defaultLogger","QueryClient","constructor","config","queryCache","mutationCache","logger","defaultOptions","queryDefaults","mutationDefaults","mountCount","process","env","NODE_ENV","error","mount","unsubscribeFocus","subscribe","isFocused","resumePausedMutations","onFocus","unsubscribeOnline","isOnline","onOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","call","undefined","isFetching","arg1","arg2","filters","fetchStatus","findAll","length","isMutating","fetching","getQueryData","queryKey","_this$queryCache$find","find","state","data","ensureQueryData","arg3","parsedOptions","cachedData","Promise","resolve","fetchQuery","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","updater","options","query","prevData","defaultedOptions","defaultQueryOptions","build","setData","manual","setQueriesData","batch","getQueryState","_this$queryCache$find2","removeQueries","forEach","remove","resetQueries","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","_ref","_filters$refetchType","invalidate","refetchType","filter","isDisabled","_options$cancelRefetc","fetch","cancelRefetch","meta","refetchPage","promise","throwOnError","retry","isStaleByTime","staleTime","prefetchQuery","fetchInfiniteQuery","behavior","prefetchInfiniteQuery","getMutationCache","getLogger","getDefaultOptions","setDefaultOptions","setQueryDefaults","result","x","push","getQueryDefaults","firstMatchingDefaults","matchingDefaults","JSON","stringify","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","queryHash","refetchOnReconnect","networkMode","useErrorBoundary","suspense","defaultMutationOptions","mutations","clear"],"sources":["C:/Users/gregor.woiwode/workbench/talks/talk-qwik-angular/node_modules/.pnpm/@tanstack+query-core@4.32.0/node_modules/@tanstack/query-core/build/lib/queryClient.mjs"],"sourcesContent":["import { parseFilterArgs, parseQueryArgs, functionalUpdate, noop, hashQueryKey, partialMatchKey, hashQueryKeyByOptions } from './utils.mjs';\nimport { QueryCache } from './queryCache.mjs';\nimport { MutationCache } from './mutationCache.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior.mjs';\nimport { defaultLogger } from './logger.mjs';\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n    this.mountCount = 0;\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n    }\n  }\n\n  mount() {\n    this.mountCount++;\n    if (this.mountCount !== 1) return;\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    this.mountCount--;\n    if (this.mountCount !== 0) return;\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    this.unsubscribeFocus = undefined;\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n    this.unsubscribeOnline = undefined;\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  ensureQueryData(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const cachedData = this.getQueryData(parsedOptions.queryKey);\n    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}\n\nexport { QueryClient };\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,cAAc,EAAEC,gBAAgB,EAAEC,IAAI,EAAEC,YAAY,EAAEC,eAAe,EAAEC,qBAAqB,QAAQ,aAAa;AAC3I,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,qBAAqB,QAAQ,6BAA6B;AACnE,SAASC,aAAa,QAAQ,cAAc;;AAE5C;AACA,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACvB,IAAI,CAACC,UAAU,GAAGD,MAAM,CAACC,UAAU,IAAI,IAAIV,UAAU,CAAC,CAAC;IACvD,IAAI,CAACW,aAAa,GAAGF,MAAM,CAACE,aAAa,IAAI,IAAIV,aAAa,CAAC,CAAC;IAChE,IAAI,CAACW,MAAM,GAAGH,MAAM,CAACG,MAAM,IAAIN,aAAa;IAC5C,IAAI,CAACO,cAAc,GAAGJ,MAAM,CAACI,cAAc,IAAI,CAAC,CAAC;IACjD,IAAI,CAACC,aAAa,GAAG,EAAE;IACvB,IAAI,CAACC,gBAAgB,GAAG,EAAE;IAC1B,IAAI,CAACC,UAAU,GAAG,CAAC;IAEnB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIV,MAAM,CAACG,MAAM,EAAE;MAC1D,IAAI,CAACA,MAAM,CAACQ,KAAK,CAAC,4FAA4F,CAAC;IACjH;EACF;EAEAC,KAAKA,CAAA,EAAG;IACN,IAAI,CAACL,UAAU,EAAE;IACjB,IAAI,IAAI,CAACA,UAAU,KAAK,CAAC,EAAE;IAC3B,IAAI,CAACM,gBAAgB,GAAGpB,YAAY,CAACqB,SAAS,CAAC,MAAM;MACnD,IAAIrB,YAAY,CAACsB,SAAS,CAAC,CAAC,EAAE;QAC5B,IAAI,CAACC,qBAAqB,CAAC,CAAC;QAC5B,IAAI,CAACf,UAAU,CAACgB,OAAO,CAAC,CAAC;MAC3B;IACF,CAAC,CAAC;IACF,IAAI,CAACC,iBAAiB,GAAGxB,aAAa,CAACoB,SAAS,CAAC,MAAM;MACrD,IAAIpB,aAAa,CAACyB,QAAQ,CAAC,CAAC,EAAE;QAC5B,IAAI,CAACH,qBAAqB,CAAC,CAAC;QAC5B,IAAI,CAACf,UAAU,CAACmB,QAAQ,CAAC,CAAC;MAC5B;IACF,CAAC,CAAC;EACJ;EAEAC,OAAOA,CAAA,EAAG;IACR,IAAIC,qBAAqB,EAAEC,qBAAqB;IAEhD,IAAI,CAAChB,UAAU,EAAE;IACjB,IAAI,IAAI,CAACA,UAAU,KAAK,CAAC,EAAE;IAC3B,CAACe,qBAAqB,GAAG,IAAI,CAACT,gBAAgB,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGS,qBAAqB,CAACE,IAAI,CAAC,IAAI,CAAC;IACnG,IAAI,CAACX,gBAAgB,GAAGY,SAAS;IACjC,CAACF,qBAAqB,GAAG,IAAI,CAACL,iBAAiB,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGK,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC;IACpG,IAAI,CAACN,iBAAiB,GAAGO,SAAS;EACpC;EAEAC,UAAUA,CAACC,IAAI,EAAEC,IAAI,EAAE;IACrB,MAAM,CAACC,OAAO,CAAC,GAAG7C,eAAe,CAAC2C,IAAI,EAAEC,IAAI,CAAC;IAC7CC,OAAO,CAACC,WAAW,GAAG,UAAU;IAChC,OAAO,IAAI,CAAC7B,UAAU,CAAC8B,OAAO,CAACF,OAAO,CAAC,CAACG,MAAM;EAChD;EAEAC,UAAUA,CAACJ,OAAO,EAAE;IAClB,OAAO,IAAI,CAAC3B,aAAa,CAAC6B,OAAO,CAAC;MAAE,GAAGF,OAAO;MAC5CK,QAAQ,EAAE;IACZ,CAAC,CAAC,CAACF,MAAM;EACX;EAEAG,YAAYA,CAACC,QAAQ,EAAEP,OAAO,EAAE;IAC9B,IAAIQ,qBAAqB;IAEzB,OAAO,CAACA,qBAAqB,GAAG,IAAI,CAACpC,UAAU,CAACqC,IAAI,CAACF,QAAQ,EAAEP,OAAO,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGQ,qBAAqB,CAACE,KAAK,CAACC,IAAI;EAC9H;EAEAC,eAAeA,CAACd,IAAI,EAAEC,IAAI,EAAEc,IAAI,EAAE;IAChC,MAAMC,aAAa,GAAG1D,cAAc,CAAC0C,IAAI,EAAEC,IAAI,EAAEc,IAAI,CAAC;IACtD,MAAME,UAAU,GAAG,IAAI,CAACT,YAAY,CAACQ,aAAa,CAACP,QAAQ,CAAC;IAC5D,OAAOQ,UAAU,GAAGC,OAAO,CAACC,OAAO,CAACF,UAAU,CAAC,GAAG,IAAI,CAACG,UAAU,CAACJ,aAAa,CAAC;EAClF;EAEAK,cAAcA,CAACC,iBAAiB,EAAE;IAChC,OAAO,IAAI,CAACC,aAAa,CAAC,CAAC,CAACnB,OAAO,CAACkB,iBAAiB,CAAC,CAACE,GAAG,CAAC,CAAC;MAC1Df,QAAQ;MACRG;IACF,CAAC,KAAK;MACJ,MAAMC,IAAI,GAAGD,KAAK,CAACC,IAAI;MACvB,OAAO,CAACJ,QAAQ,EAAEI,IAAI,CAAC;IACzB,CAAC,CAAC;EACJ;EAEAY,YAAYA,CAAChB,QAAQ,EAAEiB,OAAO,EAAEC,OAAO,EAAE;IACvC,MAAMC,KAAK,GAAG,IAAI,CAACtD,UAAU,CAACqC,IAAI,CAACF,QAAQ,CAAC;IAC5C,MAAMoB,QAAQ,GAAGD,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,KAAK,CAAChB,KAAK,CAACC,IAAI;IAC1D,MAAMA,IAAI,GAAGtD,gBAAgB,CAACmE,OAAO,EAAEG,QAAQ,CAAC;IAEhD,IAAI,OAAOhB,IAAI,KAAK,WAAW,EAAE;MAC/B,OAAOf,SAAS;IAClB;IAEA,MAAMkB,aAAa,GAAG1D,cAAc,CAACmD,QAAQ,CAAC;IAC9C,MAAMqB,gBAAgB,GAAG,IAAI,CAACC,mBAAmB,CAACf,aAAa,CAAC;IAChE,OAAO,IAAI,CAAC1C,UAAU,CAAC0D,KAAK,CAAC,IAAI,EAAEF,gBAAgB,CAAC,CAACG,OAAO,CAACpB,IAAI,EAAE;MAAE,GAAGc,OAAO;MAC7EO,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEAC,cAAcA,CAACb,iBAAiB,EAAEI,OAAO,EAAEC,OAAO,EAAE;IAClD,OAAO3D,aAAa,CAACoE,KAAK,CAAC,MAAM,IAAI,CAACb,aAAa,CAAC,CAAC,CAACnB,OAAO,CAACkB,iBAAiB,CAAC,CAACE,GAAG,CAAC,CAAC;MACpFf;IACF,CAAC,KAAK,CAACA,QAAQ,EAAE,IAAI,CAACgB,YAAY,CAAChB,QAAQ,EAAEiB,OAAO,EAAEC,OAAO,CAAC,CAAC,CAAC,CAAC;EACnE;EAEAU,aAAaA,CAAC5B,QAAQ,EAAEP,OAAO,EAAE;IAC/B,IAAIoC,sBAAsB;IAE1B,OAAO,CAACA,sBAAsB,GAAG,IAAI,CAAChE,UAAU,CAACqC,IAAI,CAACF,QAAQ,EAAEP,OAAO,CAAC,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGoC,sBAAsB,CAAC1B,KAAK;EAC3H;EAEA2B,aAAaA,CAACvC,IAAI,EAAEC,IAAI,EAAE;IACxB,MAAM,CAACC,OAAO,CAAC,GAAG7C,eAAe,CAAC2C,IAAI,EAAEC,IAAI,CAAC;IAC7C,MAAM3B,UAAU,GAAG,IAAI,CAACA,UAAU;IAClCN,aAAa,CAACoE,KAAK,CAAC,MAAM;MACxB9D,UAAU,CAAC8B,OAAO,CAACF,OAAO,CAAC,CAACsC,OAAO,CAACZ,KAAK,IAAI;QAC3CtD,UAAU,CAACmE,MAAM,CAACb,KAAK,CAAC;MAC1B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAc,YAAYA,CAAC1C,IAAI,EAAEC,IAAI,EAAEc,IAAI,EAAE;IAC7B,MAAM,CAACb,OAAO,EAAEyB,OAAO,CAAC,GAAGtE,eAAe,CAAC2C,IAAI,EAAEC,IAAI,EAAEc,IAAI,CAAC;IAC5D,MAAMzC,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,MAAMqE,cAAc,GAAG;MACrBC,IAAI,EAAE,QAAQ;MACd,GAAG1C;IACL,CAAC;IACD,OAAOlC,aAAa,CAACoE,KAAK,CAAC,MAAM;MAC/B9D,UAAU,CAAC8B,OAAO,CAACF,OAAO,CAAC,CAACsC,OAAO,CAACZ,KAAK,IAAI;QAC3CA,KAAK,CAACiB,KAAK,CAAC,CAAC;MACf,CAAC,CAAC;MACF,OAAO,IAAI,CAACC,cAAc,CAACH,cAAc,EAAEhB,OAAO,CAAC;IACrD,CAAC,CAAC;EACJ;EAEAoB,aAAaA,CAAC/C,IAAI,EAAEC,IAAI,EAAEc,IAAI,EAAE;IAC9B,MAAM,CAACb,OAAO,EAAE8C,aAAa,GAAG,CAAC,CAAC,CAAC,GAAG3F,eAAe,CAAC2C,IAAI,EAAEC,IAAI,EAAEc,IAAI,CAAC;IAEvE,IAAI,OAAOiC,aAAa,CAACC,MAAM,KAAK,WAAW,EAAE;MAC/CD,aAAa,CAACC,MAAM,GAAG,IAAI;IAC7B;IAEA,MAAMC,QAAQ,GAAGlF,aAAa,CAACoE,KAAK,CAAC,MAAM,IAAI,CAAC9D,UAAU,CAAC8B,OAAO,CAACF,OAAO,CAAC,CAACsB,GAAG,CAACI,KAAK,IAAIA,KAAK,CAACuB,MAAM,CAACH,aAAa,CAAC,CAAC,CAAC;IACtH,OAAO9B,OAAO,CAACkC,GAAG,CAACF,QAAQ,CAAC,CAACG,IAAI,CAAC7F,IAAI,CAAC,CAAC8F,KAAK,CAAC9F,IAAI,CAAC;EACrD;EAEA+F,iBAAiBA,CAACvD,IAAI,EAAEC,IAAI,EAAEc,IAAI,EAAE;IAClC,MAAM,CAACb,OAAO,EAAEyB,OAAO,CAAC,GAAGtE,eAAe,CAAC2C,IAAI,EAAEC,IAAI,EAAEc,IAAI,CAAC;IAC5D,OAAO/C,aAAa,CAACoE,KAAK,CAAC,MAAM;MAC/B,IAAIoB,IAAI,EAAEC,oBAAoB;MAE9B,IAAI,CAACnF,UAAU,CAAC8B,OAAO,CAACF,OAAO,CAAC,CAACsC,OAAO,CAACZ,KAAK,IAAI;QAChDA,KAAK,CAAC8B,UAAU,CAAC,CAAC;MACpB,CAAC,CAAC;MAEF,IAAIxD,OAAO,CAACyD,WAAW,KAAK,MAAM,EAAE;QAClC,OAAOzC,OAAO,CAACC,OAAO,CAAC,CAAC;MAC1B;MAEA,MAAMwB,cAAc,GAAG;QAAE,GAAGzC,OAAO;QACjC0C,IAAI,EAAE,CAACY,IAAI,GAAG,CAACC,oBAAoB,GAAGvD,OAAO,CAACyD,WAAW,KAAK,IAAI,GAAGF,oBAAoB,GAAGvD,OAAO,CAAC0C,IAAI,KAAK,IAAI,GAAGY,IAAI,GAAG;MAC7H,CAAC;MACD,OAAO,IAAI,CAACV,cAAc,CAACH,cAAc,EAAEhB,OAAO,CAAC;IACrD,CAAC,CAAC;EACJ;EAEAmB,cAAcA,CAAC9C,IAAI,EAAEC,IAAI,EAAEc,IAAI,EAAE;IAC/B,MAAM,CAACb,OAAO,EAAEyB,OAAO,CAAC,GAAGtE,eAAe,CAAC2C,IAAI,EAAEC,IAAI,EAAEc,IAAI,CAAC;IAC5D,MAAMmC,QAAQ,GAAGlF,aAAa,CAACoE,KAAK,CAAC,MAAM,IAAI,CAAC9D,UAAU,CAAC8B,OAAO,CAACF,OAAO,CAAC,CAAC0D,MAAM,CAAChC,KAAK,IAAI,CAACA,KAAK,CAACiC,UAAU,CAAC,CAAC,CAAC,CAACrC,GAAG,CAACI,KAAK,IAAI;MAC5H,IAAIkC,qBAAqB;MAEzB,OAAOlC,KAAK,CAACmC,KAAK,CAACjE,SAAS,EAAE;QAAE,GAAG6B,OAAO;QACxCqC,aAAa,EAAE,CAACF,qBAAqB,GAAGnC,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACqC,aAAa,KAAK,IAAI,GAAGF,qBAAqB,GAAG,IAAI;QAChIG,IAAI,EAAE;UACJC,WAAW,EAAEhE,OAAO,CAACgE;QACvB;MACF,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,IAAIC,OAAO,GAAGjD,OAAO,CAACkC,GAAG,CAACF,QAAQ,CAAC,CAACG,IAAI,CAAC7F,IAAI,CAAC;IAE9C,IAAI,EAAEmE,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACyC,YAAY,CAAC,EAAE;MAC9CD,OAAO,GAAGA,OAAO,CAACb,KAAK,CAAC9F,IAAI,CAAC;IAC/B;IAEA,OAAO2G,OAAO;EAChB;EAEA/C,UAAUA,CAACpB,IAAI,EAAEC,IAAI,EAAEc,IAAI,EAAE;IAC3B,MAAMC,aAAa,GAAG1D,cAAc,CAAC0C,IAAI,EAAEC,IAAI,EAAEc,IAAI,CAAC;IACtD,MAAMe,gBAAgB,GAAG,IAAI,CAACC,mBAAmB,CAACf,aAAa,CAAC,CAAC,CAAC;;IAElE,IAAI,OAAOc,gBAAgB,CAACuC,KAAK,KAAK,WAAW,EAAE;MACjDvC,gBAAgB,CAACuC,KAAK,GAAG,KAAK;IAChC;IAEA,MAAMzC,KAAK,GAAG,IAAI,CAACtD,UAAU,CAAC0D,KAAK,CAAC,IAAI,EAAEF,gBAAgB,CAAC;IAC3D,OAAOF,KAAK,CAAC0C,aAAa,CAACxC,gBAAgB,CAACyC,SAAS,CAAC,GAAG3C,KAAK,CAACmC,KAAK,CAACjC,gBAAgB,CAAC,GAAGZ,OAAO,CAACC,OAAO,CAACS,KAAK,CAAChB,KAAK,CAACC,IAAI,CAAC;EAC5H;EAEA2D,aAAaA,CAACxE,IAAI,EAAEC,IAAI,EAAEc,IAAI,EAAE;IAC9B,OAAO,IAAI,CAACK,UAAU,CAACpB,IAAI,EAAEC,IAAI,EAAEc,IAAI,CAAC,CAACsC,IAAI,CAAC7F,IAAI,CAAC,CAAC8F,KAAK,CAAC9F,IAAI,CAAC;EACjE;EAEAiH,kBAAkBA,CAACzE,IAAI,EAAEC,IAAI,EAAEc,IAAI,EAAE;IACnC,MAAMC,aAAa,GAAG1D,cAAc,CAAC0C,IAAI,EAAEC,IAAI,EAAEc,IAAI,CAAC;IACtDC,aAAa,CAAC0D,QAAQ,GAAGzG,qBAAqB,CAAC,CAAC;IAChD,OAAO,IAAI,CAACmD,UAAU,CAACJ,aAAa,CAAC;EACvC;EAEA2D,qBAAqBA,CAAC3E,IAAI,EAAEC,IAAI,EAAEc,IAAI,EAAE;IACtC,OAAO,IAAI,CAAC0D,kBAAkB,CAACzE,IAAI,EAAEC,IAAI,EAAEc,IAAI,CAAC,CAACsC,IAAI,CAAC7F,IAAI,CAAC,CAAC8F,KAAK,CAAC9F,IAAI,CAAC;EACzE;EAEA6B,qBAAqBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACd,aAAa,CAACc,qBAAqB,CAAC,CAAC;EACnD;EAEAkC,aAAaA,CAAA,EAAG;IACd,OAAO,IAAI,CAACjD,UAAU;EACxB;EAEAsG,gBAAgBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACrG,aAAa;EAC3B;EAEAsG,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACrG,MAAM;EACpB;EAEAsG,iBAAiBA,CAAA,EAAG;IAClB,OAAO,IAAI,CAACrG,cAAc;EAC5B;EAEAsG,iBAAiBA,CAACpD,OAAO,EAAE;IACzB,IAAI,CAAClD,cAAc,GAAGkD,OAAO;EAC/B;EAEAqD,gBAAgBA,CAACvE,QAAQ,EAAEkB,OAAO,EAAE;IAClC,MAAMsD,MAAM,GAAG,IAAI,CAACvG,aAAa,CAACiC,IAAI,CAACuE,CAAC,IAAIzH,YAAY,CAACgD,QAAQ,CAAC,KAAKhD,YAAY,CAACyH,CAAC,CAACzE,QAAQ,CAAC,CAAC;IAEhG,IAAIwE,MAAM,EAAE;MACVA,MAAM,CAACxG,cAAc,GAAGkD,OAAO;IACjC,CAAC,MAAM;MACL,IAAI,CAACjD,aAAa,CAACyG,IAAI,CAAC;QACtB1E,QAAQ;QACRhC,cAAc,EAAEkD;MAClB,CAAC,CAAC;IACJ;EACF;EAEAyD,gBAAgBA,CAAC3E,QAAQ,EAAE;IACzB,IAAI,CAACA,QAAQ,EAAE;MACb,OAAOX,SAAS;IAClB,CAAC,CAAC;;IAGF,MAAMuF,qBAAqB,GAAG,IAAI,CAAC3G,aAAa,CAACiC,IAAI,CAACuE,CAAC,IAAIxH,eAAe,CAAC+C,QAAQ,EAAEyE,CAAC,CAACzE,QAAQ,CAAC,CAAC,CAAC,CAAC;;IAEnG,IAAI5B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC;MACA,MAAMuG,gBAAgB,GAAG,IAAI,CAAC5G,aAAa,CAACkF,MAAM,CAACsB,CAAC,IAAIxH,eAAe,CAAC+C,QAAQ,EAAEyE,CAAC,CAACzE,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAEhG,IAAI6E,gBAAgB,CAACjF,MAAM,GAAG,CAAC,EAAE;QAC/B,IAAI,CAAC7B,MAAM,CAACQ,KAAK,CAAC,uDAAuD,GAAGuG,IAAI,CAACC,SAAS,CAAC/E,QAAQ,CAAC,GAAG,gNAAgN,CAAC;MAC1T;IACF;IAEA,OAAO4E,qBAAqB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAAC5G,cAAc;EACtF;EAEAgH,mBAAmBA,CAACC,WAAW,EAAE/D,OAAO,EAAE;IACxC,MAAMsD,MAAM,GAAG,IAAI,CAACtG,gBAAgB,CAACgC,IAAI,CAACuE,CAAC,IAAIzH,YAAY,CAACiI,WAAW,CAAC,KAAKjI,YAAY,CAACyH,CAAC,CAACQ,WAAW,CAAC,CAAC;IAEzG,IAAIT,MAAM,EAAE;MACVA,MAAM,CAACxG,cAAc,GAAGkD,OAAO;IACjC,CAAC,MAAM;MACL,IAAI,CAAChD,gBAAgB,CAACwG,IAAI,CAAC;QACzBO,WAAW;QACXjH,cAAc,EAAEkD;MAClB,CAAC,CAAC;IACJ;EACF;EAEAgE,mBAAmBA,CAACD,WAAW,EAAE;IAC/B,IAAI,CAACA,WAAW,EAAE;MAChB,OAAO5F,SAAS;IAClB,CAAC,CAAC;;IAGF,MAAMuF,qBAAqB,GAAG,IAAI,CAAC1G,gBAAgB,CAACgC,IAAI,CAACuE,CAAC,IAAIxH,eAAe,CAACgI,WAAW,EAAER,CAAC,CAACQ,WAAW,CAAC,CAAC,CAAC,CAAC;;IAE5G,IAAI7G,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC;MACA,MAAMuG,gBAAgB,GAAG,IAAI,CAAC3G,gBAAgB,CAACiF,MAAM,CAACsB,CAAC,IAAIxH,eAAe,CAACgI,WAAW,EAAER,CAAC,CAACQ,WAAW,CAAC,CAAC,CAAC,CAAC;;MAEzG,IAAIJ,gBAAgB,CAACjF,MAAM,GAAG,CAAC,EAAE;QAC/B,IAAI,CAAC7B,MAAM,CAACQ,KAAK,CAAC,0DAA0D,GAAGuG,IAAI,CAACC,SAAS,CAACE,WAAW,CAAC,GAAG,yNAAyN,CAAC;MACzU;IACF;IAEA,OAAOL,qBAAqB,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAAC5G,cAAc;EACtF;EAEAsD,mBAAmBA,CAACJ,OAAO,EAAE;IAC3B,IAAIA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACiE,UAAU,EAAE;MACzC,OAAOjE,OAAO;IAChB;IAEA,MAAMG,gBAAgB,GAAG;MAAE,GAAG,IAAI,CAACrD,cAAc,CAACoH,OAAO;MACvD,GAAG,IAAI,CAACT,gBAAgB,CAACzD,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAClB,QAAQ,CAAC;MACrE,GAAGkB,OAAO;MACViE,UAAU,EAAE;IACd,CAAC;IAED,IAAI,CAAC9D,gBAAgB,CAACgE,SAAS,IAAIhE,gBAAgB,CAACrB,QAAQ,EAAE;MAC5DqB,gBAAgB,CAACgE,SAAS,GAAGnI,qBAAqB,CAACmE,gBAAgB,CAACrB,QAAQ,EAAEqB,gBAAgB,CAAC;IACjG,CAAC,CAAC;;IAGF,IAAI,OAAOA,gBAAgB,CAACiE,kBAAkB,KAAK,WAAW,EAAE;MAC9DjE,gBAAgB,CAACiE,kBAAkB,GAAGjE,gBAAgB,CAACkE,WAAW,KAAK,QAAQ;IACjF;IAEA,IAAI,OAAOlE,gBAAgB,CAACmE,gBAAgB,KAAK,WAAW,EAAE;MAC5DnE,gBAAgB,CAACmE,gBAAgB,GAAG,CAAC,CAACnE,gBAAgB,CAACoE,QAAQ;IACjE;IAEA,OAAOpE,gBAAgB;EACzB;EAEAqE,sBAAsBA,CAACxE,OAAO,EAAE;IAC9B,IAAIA,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACiE,UAAU,EAAE;MACzC,OAAOjE,OAAO;IAChB;IAEA,OAAO;MAAE,GAAG,IAAI,CAAClD,cAAc,CAAC2H,SAAS;MACvC,GAAG,IAAI,CAACT,mBAAmB,CAAChE,OAAO,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC+D,WAAW,CAAC;MAC3E,GAAG/D,OAAO;MACViE,UAAU,EAAE;IACd,CAAC;EACH;EAEAS,KAAKA,CAAA,EAAG;IACN,IAAI,CAAC/H,UAAU,CAAC+H,KAAK,CAAC,CAAC;IACvB,IAAI,CAAC9H,aAAa,CAAC8H,KAAK,CAAC,CAAC;EAC5B;AAEF;AAEA,SAASlI,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}